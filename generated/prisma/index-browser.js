
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CustomersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ExpensesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  description: 'description',
  amount: 'amount',
  date: 'date',
  category: 'category',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  description: 'description',
  quantity_in_stock: 'quantity_in_stock',
  cost_price: 'cost_price',
  selling_price: 'selling_price',
  supplier_id: 'supplier_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Inventory_transactionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  inventory_id: 'inventory_id',
  transaction_type: 'transaction_type',
  quantity_change: 'quantity_change',
  date: 'date',
  reference_type: 'reference_type',
  reference_id: 'reference_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Purchase_itemsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  purchase_id: 'purchase_id',
  inventory_id: 'inventory_id',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total_price: 'total_price',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PurchasesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  supplier_id: 'supplier_id',
  purchase_date: 'purchase_date',
  total_amount: 'total_amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SalesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  customer_id: 'customer_id',
  sale_date: 'sale_date',
  total_amount: 'total_amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Sales_itemsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  sale_id: 'sale_id',
  inventory_id: 'inventory_id',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total_price: 'total_price',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SuppliersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  contact_info: 'contact_info',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BusinessScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  products: 'products',
  location: 'location',
  description: 'description',
  imagePath: 'imagePath',
  socialMedia: 'socialMedia',
  hoursPerDay: 'hoursPerDay',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlansScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  plan: 'plan',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessId: 'businessId',
  permissions: 'permissions'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  role: 'role',
  email: 'email',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  customers: 'customers',
  expenses: 'expenses',
  inventory: 'inventory',
  inventory_transactions: 'inventory_transactions',
  purchase_items: 'purchase_items',
  purchases: 'purchases',
  sales: 'sales',
  sales_items: 'sales_items',
  suppliers: 'suppliers',
  business: 'business',
  plans: 'plans',
  employees: 'employees',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
